// Code generated by tagtype. DO NOT EDIT.

package consensus

import (
	"encoding/json"
	"fmt"
)

type __jsonWrapper__ struct {
	T string          `json:"type"`
	V json.RawMessage `json:"value"`
}

// MarshalJSON implements the json.Marshaler interface for BlockPartMessage.
// It encodes the value as a tagged wrapper object.
func (v BlockPartMessage) MarshalJSON() ([]byte, error) {
	type shim BlockPartMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for BlockPartMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *BlockPartMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim BlockPartMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EndHeightMessage.
// It encodes the value as a tagged wrapper object.
func (v EndHeightMessage) MarshalJSON() ([]byte, error) {
	type shim EndHeightMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EndHeightMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *EndHeightMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EndHeightMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for HasVoteMessage.
// It encodes the value as a tagged wrapper object.
func (v HasVoteMessage) MarshalJSON() ([]byte, error) {
	type shim HasVoteMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for HasVoteMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *HasVoteMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim HasVoteMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for NewRoundStepMessage.
// It encodes the value as a tagged wrapper object.
func (v NewRoundStepMessage) MarshalJSON() ([]byte, error) {
	type shim NewRoundStepMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for NewRoundStepMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *NewRoundStepMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim NewRoundStepMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for NewValidBlockMessage.
// It encodes the value as a tagged wrapper object.
func (v NewValidBlockMessage) MarshalJSON() ([]byte, error) {
	type shim NewValidBlockMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for NewValidBlockMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *NewValidBlockMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim NewValidBlockMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for ProposalMessage.
// It encodes the value as a tagged wrapper object.
func (v ProposalMessage) MarshalJSON() ([]byte, error) {
	type shim ProposalMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProposalMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *ProposalMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim ProposalMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for ProposalPOLMessage.
// It encodes the value as a tagged wrapper object.
func (v ProposalPOLMessage) MarshalJSON() ([]byte, error) {
	type shim ProposalPOLMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProposalPOLMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *ProposalPOLMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim ProposalPOLMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for VoteMessage.
// It encodes the value as a tagged wrapper object.
func (v VoteMessage) MarshalJSON() ([]byte, error) {
	type shim VoteMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for VoteMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *VoteMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim VoteMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for VoteSetBitsMessage.
// It encodes the value as a tagged wrapper object.
func (v VoteSetBitsMessage) MarshalJSON() ([]byte, error) {
	type shim VoteSetBitsMessage
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for VoteSetBitsMessage.
// It expects a tagged wrapper object containing the encoded value.
func (v *VoteSetBitsMessage) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim VoteSetBitsMessage
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for VoteSetMaj23Message.
// It encodes the value as a tagged wrapper object.
func (v VoteSetMaj23Message) MarshalJSON() ([]byte, error) {
	type shim VoteSetMaj23Message
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for VoteSetMaj23Message.
// It expects a tagged wrapper object containing the encoded value.
func (v *VoteSetMaj23Message) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim VoteSetMaj23Message
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for msgInfo.
// It encodes the value as a tagged wrapper object.
func (v msgInfo) MarshalJSON() ([]byte, error) {
	type shim msgInfo
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for msgInfo.
// It expects a tagged wrapper object containing the encoded value.
func (v *msgInfo) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim msgInfo
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for timeoutInfo.
// It encodes the value as a tagged wrapper object.
func (v timeoutInfo) MarshalJSON() ([]byte, error) {
	type shim timeoutInfo
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for timeoutInfo.
// It expects a tagged wrapper object containing the encoded value.
func (v *timeoutInfo) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim timeoutInfo
	return json.Unmarshal(wrapper.V, (*shim)(v))
}
