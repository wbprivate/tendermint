// Code generated by tagtype. DO NOT EDIT.

package crypto

import (
	"encoding/json"
	"fmt"
)

type __jsonWrapper__ struct {
	T string          `json:"type"`
	V json.RawMessage `json:"value"`
}

// MarshalJSON implements the json.Marshaler interface for PublicKey.
// It encodes the value as a tagged wrapper object.
func (v PublicKey) MarshalJSON() ([]byte, error) {
	type shim PublicKey
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey.
// It expects a tagged wrapper object containing the encoded value.
func (v *PublicKey) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim PublicKey
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for PublicKey_Ed25519.
// It encodes the value as a tagged wrapper object.
func (v PublicKey_Ed25519) MarshalJSON() ([]byte, error) {
	type shim PublicKey_Ed25519
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey_Ed25519.
// It expects a tagged wrapper object containing the encoded value.
func (v *PublicKey_Ed25519) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim PublicKey_Ed25519
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for PublicKey_Secp256K1.
// It encodes the value as a tagged wrapper object.
func (v PublicKey_Secp256K1) MarshalJSON() ([]byte, error) {
	type shim PublicKey_Secp256K1
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey_Secp256K1.
// It expects a tagged wrapper object containing the encoded value.
func (v *PublicKey_Secp256K1) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim PublicKey_Secp256K1
	return json.Unmarshal(wrapper.V, (*shim)(v))
}
