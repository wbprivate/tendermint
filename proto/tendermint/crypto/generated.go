// Code generated by tmjson. DO NOT EDIT

package crypto

import (
	"encoding/json"
	"fmt"
)

type _typeTagged struct {
	T string          `json:"type"`
	V json.RawMessage `json:"value"`
}

const _typeTag_PublicKey = "tendermint.crypto.PublicKey"

// MarshalJSON implements the json.Marshaler interface for PublicKey.
// It wraps the encoding in a type-tagged object.
func (v PublicKey) MarshalJSON() ([]byte, error) {
	type shim PublicKey
	value, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(_typeTagged{T: _typeTag_PublicKey, V: value})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey.
// It expects a type-tagged object with the tag "tendermint.crypto.PublicKey".
func (v *PublicKey) UnmarshalJSON(data []byte) error {
	type shim PublicKey
	var tmp _typeTagged
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	} else if tmp.T != _typeTag_PublicKey {
		return fmt.Errorf("wrong type tag %q for %q", tmp.T, _typeTag_PublicKey)
	}
	return json.Unmarshal(tmp.V, (*shim)(v))
}

const _typeTag_PublicKey_Ed25519 = "tendermint.crypto.PublicKey_Ed25519"

// MarshalJSON implements the json.Marshaler interface for PublicKey_Ed25519.
// It wraps the encoding in a type-tagged object.
func (v PublicKey_Ed25519) MarshalJSON() ([]byte, error) {
	type shim PublicKey_Ed25519
	value, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(_typeTagged{T: _typeTag_PublicKey_Ed25519, V: value})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey_Ed25519.
// It expects a type-tagged object with the tag "tendermint.crypto.PublicKey_Ed25519".
func (v *PublicKey_Ed25519) UnmarshalJSON(data []byte) error {
	type shim PublicKey_Ed25519
	var tmp _typeTagged
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	} else if tmp.T != _typeTag_PublicKey_Ed25519 {
		return fmt.Errorf("wrong type tag %q for %q", tmp.T, _typeTag_PublicKey_Ed25519)
	}
	return json.Unmarshal(tmp.V, (*shim)(v))
}

const _typeTag_PublicKey_Secp256K1 = "tendermint.crypto.PublicKey_Secp256K1"

// MarshalJSON implements the json.Marshaler interface for PublicKey_Secp256K1.
// It wraps the encoding in a type-tagged object.
func (v PublicKey_Secp256K1) MarshalJSON() ([]byte, error) {
	type shim PublicKey_Secp256K1
	value, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(_typeTagged{T: _typeTag_PublicKey_Secp256K1, V: value})
}

// UnmarshalJSON implements the json.Unmarshaler interface for PublicKey_Secp256K1.
// It expects a type-tagged object with the tag "tendermint.crypto.PublicKey_Secp256K1".
func (v *PublicKey_Secp256K1) UnmarshalJSON(data []byte) error {
	type shim PublicKey_Secp256K1
	var tmp _typeTagged
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	} else if tmp.T != _typeTag_PublicKey_Secp256K1 {
		return fmt.Errorf("wrong type tag %q for %q", tmp.T, _typeTag_PublicKey_Secp256K1)
	}
	return json.Unmarshal(tmp.V, (*shim)(v))
}
