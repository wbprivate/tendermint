// Code generated by tagtype. DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
)

type __jsonWrapper__ struct {
	T string          `json:"type"`
	V json.RawMessage `json:"value"`
}

// MarshalJSON implements the json.Marshaler interface for DuplicateVoteEvidence.
// It encodes the value as a tagged wrapper object.
func (v DuplicateVoteEvidence) MarshalJSON() ([]byte, error) {
	type shim DuplicateVoteEvidence
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for DuplicateVoteEvidence.
// It expects a tagged wrapper object containing the encoded value.
func (v *DuplicateVoteEvidence) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim DuplicateVoteEvidence
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataBlockSyncStatus.
// It encodes the value as a tagged wrapper object.
func (v EventDataBlockSyncStatus) MarshalJSON() ([]byte, error) {
	type shim EventDataBlockSyncStatus
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataBlockSyncStatus.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataBlockSyncStatus) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataBlockSyncStatus
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataCompleteProposal.
// It encodes the value as a tagged wrapper object.
func (v EventDataCompleteProposal) MarshalJSON() ([]byte, error) {
	type shim EventDataCompleteProposal
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataCompleteProposal.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataCompleteProposal) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataCompleteProposal
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataNewBlock.
// It encodes the value as a tagged wrapper object.
func (v EventDataNewBlock) MarshalJSON() ([]byte, error) {
	type shim EventDataNewBlock
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataNewBlock.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataNewBlock) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataNewBlock
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataNewBlockHeader.
// It encodes the value as a tagged wrapper object.
func (v EventDataNewBlockHeader) MarshalJSON() ([]byte, error) {
	type shim EventDataNewBlockHeader
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataNewBlockHeader.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataNewBlockHeader) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataNewBlockHeader
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataNewEvidence.
// It encodes the value as a tagged wrapper object.
func (v EventDataNewEvidence) MarshalJSON() ([]byte, error) {
	type shim EventDataNewEvidence
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataNewEvidence.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataNewEvidence) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataNewEvidence
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataNewRound.
// It encodes the value as a tagged wrapper object.
func (v EventDataNewRound) MarshalJSON() ([]byte, error) {
	type shim EventDataNewRound
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataNewRound.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataNewRound) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataNewRound
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataRoundState.
// It encodes the value as a tagged wrapper object.
func (v EventDataRoundState) MarshalJSON() ([]byte, error) {
	type shim EventDataRoundState
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataRoundState.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataRoundState) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataRoundState
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataStateSyncStatus.
// It encodes the value as a tagged wrapper object.
func (v EventDataStateSyncStatus) MarshalJSON() ([]byte, error) {
	type shim EventDataStateSyncStatus
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataStateSyncStatus.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataStateSyncStatus) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataStateSyncStatus
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataString.
// It encodes the value as a tagged wrapper object.
func (v EventDataString) MarshalJSON() ([]byte, error) {
	type shim EventDataString
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataString.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataString) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataString
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataTx.
// It encodes the value as a tagged wrapper object.
func (v EventDataTx) MarshalJSON() ([]byte, error) {
	type shim EventDataTx
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataTx.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataTx) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataTx
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataValidatorSetUpdates.
// It encodes the value as a tagged wrapper object.
func (v EventDataValidatorSetUpdates) MarshalJSON() ([]byte, error) {
	type shim EventDataValidatorSetUpdates
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataValidatorSetUpdates.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataValidatorSetUpdates) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataValidatorSetUpdates
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for EventDataVote.
// It encodes the value as a tagged wrapper object.
func (v EventDataVote) MarshalJSON() ([]byte, error) {
	type shim EventDataVote
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventDataVote.
// It expects a tagged wrapper object containing the encoded value.
func (v *EventDataVote) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim EventDataVote
	return json.Unmarshal(wrapper.V, (*shim)(v))
}

// MarshalJSON implements the json.Marshaler interface for LightClientAttackEvidence.
// It encodes the value as a tagged wrapper object.
func (v LightClientAttackEvidence) MarshalJSON() ([]byte, error) {
	type shim LightClientAttackEvidence
	data, err := json.Marshal((*shim)(&v))
	if err != nil {
		return nil, err
	}
	return json.Marshal(__jsonWrapper__{
		T: v.jsonWrapperTag(), V: data,
	})
}

// UnmarshalJSON implements the json.Unmarshaler interface for LightClientAttackEvidence.
// It expects a tagged wrapper object containing the encoded value.
func (v *LightClientAttackEvidence) UnmarshalJSON(data []byte) error {
	var wrapper __jsonWrapper__
	if err := json.Unmarshal(data, &wrapper); err != nil {
		return err
	} else if want := v.jsonWrapperTag(); wrapper.T != want {
		return fmt.Errorf("type tag %q does not match %q", wrapper.T, want)
	}
	type shim LightClientAttackEvidence
	return json.Unmarshal(wrapper.V, (*shim)(v))
}
